/*
 * -------------------------------------------------
 *  nf-core/ampliseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  pipelineVersion = '1.0dev' // Pipeline version
  container = 'nfcore/ampliseq:1.0.0'

  help = false
  extension = "/*_L001_R{1,2}_001.fastq.gz"
  reads = "data" + "${extension}"
  readPaths = false
  singleEnd = false
  outdir = './results'
  FW_primer = false
  RV_primer = false 
  classifier = false
  metadata = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
}

// enable docker by default
docker.enabled = true
process.container = params.container
docker.temp = 'auto'
env {
      JOBLIB_TEMP_FOLDER="/tmp"
    }

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    process.container = params.container
    docker.temp = 'auto'
    env {
      JOBLIB_TEMP_FOLDER="/tmp"
    }
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  standard {
    includeConfig 'conf/base.config'
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  binac {
    includeConfig 'conf/base.config'
    includeConfig 'conf/binac.config'
  }
  uzh {
    includeConfig 'conf/base.config'
    includeConfig 'conf/uzh.config'
  }
  cfc {
    includeConfig 'conf/base.config'
    includeConfig 'conf/cfc.config'
  }
  standard {
    includeConfig 'conf/base.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/ampliseq_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/ampliseq_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/ampliseq_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/ampliseq_dag.svg"
}

manifest {
  name = 'nf-core/ampliseq'
  description = '16S rRNA amplicon sequencing analysis workflow using QIIME2'
  homePage = 'https://github.com/nf-core/ampliseq'
  version = '1.0.0'
  mainScript = 'main.nf'
  nextflowVersion = '>=18.10.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
